name: CI/CD Pipeline

# Trigger the workflow on push or pull request to the 'main' branch
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "18"

      # Step 3: Install dependencies
      - name: Install dependencies
        run: npm install

      # Step 4: Run tests (optional, assuming you have tests)
      - name: Run tests
        run: npm test

      # Step 5: Build Docker image
      - name: Build Docker image
        run: docker build -t milanchaulagain010/assignment:latest .

      # Step 6: Log in to DockerHub (using credentials from GitHub Secrets)
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 7: Tag and Push Docker image to DockerHub
      - name: Tag and Push Docker image
        run: |
          docker tag milanchaulagain010/assignment:latest docker.io/milanchaulagain010/assignment:latest
          docker push docker.io/milanchaulagain010/assignment:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: production

    steps:
      # Step 1: Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Install Terraform
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2

      # Step 3: Initialize Terraform
      - name: Terraform Init
        run: terraform init
        working-directory: teraform/

      # Step 4: Apply Terraform to provision infrastructure (e.g., EC2)
      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: teraform/
